<?xml version="1.0"?>
<launch>
  <arg name="model" default="$(find-pkg-share pc_pipe)/config/robot.urdf" />
  <arg name="start_gazebo" default="false" />
  <arg name="viz" default="false" />
  <arg name="stereo_pipeline_single_process" default="true" />
  <arg name="avoid_point_cloud_padding" default="true" />

  <!-- Start Gazebo -->
  <group if="$(var start_gazebo)">
    <include file="$(find-pkg-share ros_ign_gazebo)/launch/ign_gazebo.launch.py">
      <!--arg name="paused" value="true"/>
      <arg name="use_sim_time" value="true"/>
      <arg name="gui" value="true"/>
      <arg name="recording" value="false"/>
      <arg name="debug" value="false"/>
      <arg name="verbose" value="true"/-->
    </include>

    <!-- Spawn robot in Gazebo -->
    <node name="spawn_robot_urdf" pkg="ros_ign_gazebo" exec="create"
      args="-world default -file $(var model) -z 0.0 -entity my_robot" output="screen"></node>

      <node
        pkg="ros_ign_bridge"
        exec="parameter_bridge"
        name="$(anon ros_ign_bridge)"
        output="screen"
        args="/model/vehicle/odometry@nav_msgs/Odometry@ignition.msgs.Odometry /cmd_vel@geometry_msgs/Twist@ignition.msgs.Twist ">
      </node>
  </group>

  <!-- TF description -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher" output="screen">
    <param name="robot_description" value="$(command 'cat $(var model)')"/>
    <param name="use_sim_time" value="true" />
  </node>

  <group if="$(var viz)">
    <node name="rviz" pkg="rviz2" exec="rviz2" args="-d $(find-pkg-share pc_pipe)/config/robot.rviz">
      <param name="use_sim_time" value="true" />
    </node>
  </group>

  <!-- Mock image filters -->
  <node namespace="mycamera/left" name="image_filter_left" pkg="pc_pipe" exec="image_filter.py" output="screen">
    <param name="use_sim_time" value="true" />
  </node>
  <node namespace="mycamera/right" name="image_filter_right" pkg="pc_pipe" exec="image_filter.py" output="screen">
    <param name="use_sim_time" value="true" />
  </node>

  <!-- Stereo image pipeline -->
  <group if="$(var stereo_pipeline_single_process)">
    <include file="$(find-pkg-share pc_pipe)/launch/stereo_image_proc.launch.py">
      <arg name="avoid_point_cloud_padding" value="$(var avoid_point_cloud_padding)" />
    </include>
  </group>
  <group unless="$(var stereo_pipeline_single_process)">
    <node namespace="mycamera" pkg="stereo_image_proc" exec="disparity_node" output="screen">
      <param name="approximate_sync" value="true" />
      <param name="use_sim_time"     value="true" />
      <remap from="right/image_rect"      to="right/image_filtered" />
      <remap from="left/image_rect"       to="left/image_filtered" />
      <remap from="left/image_rect_color" to="left/image_filtered" />
    </node>
    <node namespace="mycamera" pkg="stereo_image_proc" exec="point_cloud_node" output="screen">
      <param name="approximate_sync" value="true" />
      <param name="use_sim_time" value="true" />
      <param name="avoid_point_cloud_padding" value="$(var avoid_point_cloud_padding)" />
      <remap from="left/image_rect_color" to="left/image_filtered" />
    </node>
  </group>
</launch>
